{"version":3,"sources":["editor/LineTypePicker.tsx","shapes/Line.tsx","shapes/PreviewLine.tsx","editor/TileEditor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LineType","INVALID_COORDINATE_VALUE","Line","line","lineStyle","this","props","colour","moveTo","startX","startY","lineTo","endX","endY","draw","graphics","React","Component","PreviewLine","clear","TileEditor","properties","state","lineCoordinates","lineStarted","previewLineCoordinates","currentLineColour","clickEvent","setState","data","global","x","y","update","$set","$push","event","width","height","click","drawLine","mousemove","mouseMoveEvent","drawPreviewLine","interactive","image","map","index","LineTypePicker","selectLineType","lineType","onLineTypeSelected","type","name","id","defaultChecked","onChange","GLASSED","htmlFor","DOUBLY_GLASSED","MITRE_CUT","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1139372d.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface LineTypePickerProperties {\n\tonLineTypeSelected: (lineType: LineType) => void;\n}\n\nexport enum LineType {\n\tGLASSED,\n\tDOUBLY_GLASSED,\n\tMITRE_CUT,\n};\n\nfunction LineTypePicker(properties: LineTypePickerProperties) {\n\tconst selectLineType = (lineType: LineType) => {\n\t\tproperties.onLineTypeSelected(lineType);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\ttype=\"radio\" name=\"rbLineType\" id=\"rbLineTypeGlassed\"\n\t\t\t\tdefaultChecked={true}\n\t\t\t\tonChange={() => selectLineType(LineType.GLASSED)}\n\t\t\t/>\n\t\t\t<label htmlFor=\"rbLineTypeGlassed\">X (Kante überglasiert)</label>\n\t\t\t<input\n\t\t\t\ttype=\"radio\" name=\"rbLineType\" id=\"rbLineTypeDoublyGlassed\"\n\t\t\t\tonChange={() => selectLineType(LineType.DOUBLY_GLASSED)}\n\t\t\t/>\n\t\t\t<label htmlFor=\"rbLineTypeDoublyGlassed\">XX (Kante überglasiert + hinten überglasiert)</label>\n\t\t\t<input\n\t\t\t\ttype=\"radio\" name=\"rbLineType\" id=\"rbLineTypeMitreCut\"\n\t\t\t\tonChange={() => selectLineType(LineType.MITRE_CUT)}\n\t\t\t/>\n\t\t\t<label htmlFor=\"rbLineTypeMitreCut\">Z (Gehrungsschnitt)</label>\n\t\t</div>\n\t);\n}\n\nexport default LineTypePicker;\n","import React from \"react\";\nimport { Graphics } from \"@inlet/react-pixi\";\n\nexport const INVALID_COORDINATE_VALUE = (-1);\n\nexport interface LineProperties {\n\tstartX: number;\n\tstartY: number;\n\tendX: number;\n\tendY: number;\n\tcolour: number;\n}\n\nexport class Line extends React.Component<LineProperties, {}> {\n\tprotected draw(line: any) {\n\t\tline.lineStyle(4, this.props.colour, 1);\n\t\tline.moveTo(this.props.startX, this.props.startY);\n\t\tline.lineTo(this.props.endX, this.props.endY);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Graphics draw={(graphics) => this.draw(graphics)} />\n\t\t);\n\t}\n};\n","import { Line } from \"./Line\";\n\nexport class PreviewLine extends Line {\n\tprotected draw(line: any) {\n\t\tline.clear();\n\t\tsuper.draw(line);\n\t}\n};\n","import React from \"react\";\nimport update from \"immutability-helper\";\n\nimport { Stage, Sprite } from \"@inlet/react-pixi\";\nimport { InteractionEvent } from \"pixi.js\";\n\nimport { Line, LineProperties, INVALID_COORDINATE_VALUE } from \"../shapes/Line\";\nimport { PreviewLine } from \"../shapes/PreviewLine\";\n\ninterface TileEditorProperties {\n\tcurrentLineColour: number;\n};\n\ninterface TileEditorState {\n\tlineCoordinates: Array<LineProperties>;\n\tlineStarted: boolean;\n\tstartX: number;\n\tstartY: number;\n\tpreviewLineCoordinates: LineProperties;\n};\n\nclass TileEditor extends React.Component<TileEditorProperties, TileEditorState> {\n\tconstructor(properties: TileEditorProperties) {\n\t\tsuper(properties);\n\t\tthis.state = {\n\t\t\tlineCoordinates: [],\n\t\t\tlineStarted: false,\n\t\t\tstartX: INVALID_COORDINATE_VALUE,\n\t\t\tstartY: INVALID_COORDINATE_VALUE,\n\t\t\tpreviewLineCoordinates: {\n\t\t\t\tstartX: INVALID_COORDINATE_VALUE,\n\t\t\t\tstartY: INVALID_COORDINATE_VALUE,\n\t\t\t\tendX: INVALID_COORDINATE_VALUE,\n\t\t\t\tendY: INVALID_COORDINATE_VALUE,\n\t\t\t\tcolour: this.props.currentLineColour,\n\t\t\t},\n\t\t};\n\t}\n\n\tdrawLine(clickEvent: InteractionEvent) {\n\t\tif (this.state.lineStarted === false) {\n\t\t\tthis.setState({\n\t\t\t\tlineStarted: true,\n\t\t\t\tstartX: clickEvent.data.global.x,\n\t\t\t\tstartY: clickEvent.data.global.y,\n\t\t\t\tpreviewLineCoordinates: update(this.state.previewLineCoordinates, {\n\t\t\t\t\tstartX: { $set: clickEvent.data.global.x },\n\t\t\t\t\tstartY: { $set: clickEvent.data.global.y },\n\t\t\t\t\tendX: { $set: INVALID_COORDINATE_VALUE },\n\t\t\t\t\tendY: { $set: INVALID_COORDINATE_VALUE },\n\t\t\t\t})\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tlineStarted: false,\n\t\t\t\tlineCoordinates: update(this.state.lineCoordinates, {\n\t\t\t\t\t$push: [{\n\t\t\t\t\t\tstartX: this.state.startX,\n\t\t\t\t\t\tstartY: this.state.startY,\n\t\t\t\t\t\tendX: clickEvent.data.global.x,\n\t\t\t\t\t\tendY: clickEvent.data.global.y,\n\t\t\t\t\t\tcolour: this.props.currentLineColour,\n\t\t\t\t\t}]\n\t\t\t\t}),\n\t\t\t\tstartX: INVALID_COORDINATE_VALUE,\n\t\t\t\tstartY: INVALID_COORDINATE_VALUE,\n\t\t\t\tpreviewLineCoordinates: update(this.state.previewLineCoordinates, {\n\t\t\t\t\tstartX: { $set: INVALID_COORDINATE_VALUE },\n\t\t\t\t\tstartY: { $set: INVALID_COORDINATE_VALUE },\n\t\t\t\t\tendX: { $set: INVALID_COORDINATE_VALUE },\n\t\t\t\t\tendY: { $set: INVALID_COORDINATE_VALUE },\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t}\n\n\tdrawPreviewLine(event: InteractionEvent) {\n\t\tif (this.state.lineStarted === true) {\n\t\t\tthis.setState({\n\t\t\t\tpreviewLineCoordinates: update(this.state.previewLineCoordinates, {\n\t\t\t\t\tendX: { $set: event.data.global.x },\n\t\t\t\t\tendY: { $set: event.data.global.y },\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Stage width={640} height={640}>\n\t\t\t\t<Sprite\n\t\t\t\t\twidth={640} height={640}\n\t\t\t\t\tclick={(clickEvent) => this.drawLine(clickEvent)}\n\t\t\t\t\tmousemove={(mouseMoveEvent) => this.drawPreviewLine(mouseMoveEvent)}\n\t\t\t\t\tinteractive={true}\n\t\t\t\t\timage=\"https://a.1stdibscdn.com/archivesE/upload/10384/21_15/2336782/2336782_l.jpeg\" x={0} y={0}>\n\t\t\t\t</Sprite>\n\t\t\t\t{\n\t\t\t\t\tthis.state.lineCoordinates.map((line, index) => (\n\t\t\t\t\t\t<Line\n\t\t\t\t\t\t\tstartX={line.startX} startY={line.startY}\n\t\t\t\t\t\t\tendX={line.endX} endY={line.endY}\n\t\t\t\t\t\t\tcolour={line.colour}\n\t\t\t\t\t\t\tkey={`line${index}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tthis.state.lineStarted\n\t\t\t\t\t\t&& this.state.previewLineCoordinates.endX !== INVALID_COORDINATE_VALUE\n\t\t\t\t\t\t&& this.state.previewLineCoordinates.endY !== INVALID_COORDINATE_VALUE\n\t\t\t\t\t? <PreviewLine\n\t\t\t\t\t\tstartX={this.state.previewLineCoordinates.startX} startY={this.state.previewLineCoordinates.startY}\n\t\t\t\t\t\tendX={this.state.previewLineCoordinates.endX} endY={this.state.previewLineCoordinates.endY}\n\t\t\t\t\t\tcolour={this.props.currentLineColour}\n\t\t\t\t\t\tkey=\"previewLine\"\n\t\t\t\t\t/>\n\t\t\t\t\t: <PreviewLine\n\t\t\t\t\t\tstartX={0} startY={0}\n\t\t\t\t\t\tendX={0} endY={0}\n\t\t\t\t\t\tcolour={this.props.currentLineColour}\n\t\t\t\t\t\tkey=\"previewLine\"\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t</Stage>\n\t\t);\n\t}\n}\n\nexport default TileEditor;\n","import React from \"react\";\n\nimport TileEditor from \"./editor/TileEditor\";\nimport LineTypePicker, { LineType } from \"./editor/LineTypePicker\";\n\ninterface ApplicationProperties {};\n\ninterface ApplicationState {\n\tcurrentLineColour: number;\n};\n\nclass App extends React.Component<ApplicationProperties, ApplicationState> {\n\tconstructor(properties: ApplicationProperties) {\n\t\tsuper(properties);\n\t\tthis.state = { currentLineColour: 0x2222DD };\n\t}\n\n\tonLineTypeSelected(lineType: LineType) {\n\t\tswitch (lineType) {\n\t\t\tcase LineType.GLASSED:\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentLineColour: 0x2222DD\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase LineType.DOUBLY_GLASSED:\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentLineColour: 0xDD2222\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase LineType.MITRE_CUT:\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentLineColour: 0x22DD22\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>PixiJS Demo</h1>\n\n\t\t\t\t<LineTypePicker onLineTypeSelected={lineType => this.onLineTypeSelected(lineType)} />\n\t\t\t\t<TileEditor currentLineColour={this.state.currentLineColour} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}